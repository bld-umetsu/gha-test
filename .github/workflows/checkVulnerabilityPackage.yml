name: checkVulnerabilityPackage

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths: ['**/package-lock.json', '.github/workflows/vulnerabilityPackage.json']
  workflow_dispatch:

jobs:
  prepare-checking:
    runs-on: ubuntu-latest
    timeout-minutes: 1
    outputs:
      pkg-matrix: ${{ steps.read-json.outputs.value }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Read vulnerability list from JSON
        id: read-json
        # read Json as package checking list which includes package name and version.
        run:  |
          pkg_list=$(cat "./.github/workflows/vulnerabilityPackage.json" | jq -c)
          echo $pkg_list
          echo "::set-output name=value::$( echo $pkg_list )"

  execute:
    needs: prepare-checking
    runs-on: ubuntu-latest
    timeout-minutes: 5
    # the Json read by previous job is changed to checking jobs. each job has same steps.
    strategy:
      matrix:
        entries: ${{fromJson(needs.prepare-checking.outputs.pkg-matrix)}}

    name: Checking ${{ matrix.entries.pkgnm }} ${{ matrix.entries.pkgvermin }}~${{ matrix.entries.pkgvermax }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Search and judge version of the package
        id: search-judge
        # search 'packages' and `dependencies` section for a version of vulnerability package.
        run:  |
          function chkver() {
            # change version string to array. separator is [.].
            vt=(${1//./ })
            pvmin=(${2//./ })
            pvmax=(${3//./ })
            cnt=0

            # compare with minimum version
            if (( ${#vt[@]} < ${#pvmin[@]} )); then
              len=${#vt[@]}
            else
              len=${#pvmin[@]}
            fi
            for (( i = 0; i < len; i++ )); do # loop with smaller array length
              if (( ${vt[$i]} > ${pvmin[$i]} )); then
                let cnt++   # bigger than minimum version
                break
              fi  
              if (( ${vt[$i]} < ${pvmin[$i]} )); then
                echo 0      # smaller than minimum version
                return 0
              fi
            done  
            if (( $cnt == 0 )); then
              if (( ${#vt[@]} == ${#pvmin[@]} )); then   # longer array length is bigger
                echo 1      # same as minimum version
                return 0
              elif (( ${#vt[@]} < ${#pvmin[@]} )); then
                echo 0      # smaller than minimum version
                return 0
              else
                let cnt++   # bigger than minimum version
              fi
            fi

            # compare with maximum version
            if (( ${#vt[@]} < ${#pvmax[@]} )); then
              len=${#vt[@]}
            else
              len=${#pvmax[@]}
            fi
            for (( i = 0; i < len; i++ )); do
              if (( ${vt[$i]} < ${pvmax[$i]} )); then
                echo 1      # smaller than maximum version
                return 0
              fi  
              if (( ${vt[$i]} > ${pvmax[$i]} )); then
                echo 0      # bigger than maximum version
                return 0
              fi
            done
            if (( ${#vt[@]} <= ${#pvmax[@]} )); then
              echo 1      # same version or smaller than maximum version
              return 0
            else
              echo 0      # bigger than maximum version
              return 0
            fi

            # for (( i = 0; i < len; i++ )); do
            #   if (( ${vt[$i]} > ${pvmin[$i]} && ${vt[$i]} < ${pvmax[$i]} )) ; then
            #     echo 1
            #     return 0
            #   fi
            # done
            # if (( $cnt == ${#vt[@]} )); then
            #   echo 1
            # else
            #   echo 0
            # fi
          }

          flist=$(find ./ -mindepth 1 -name "package-lock.json" | jq -R -s -c 'split("\n")[:-1]')
          errmsg=""
          for fl in $(echo $flist | jq -r '.[]'); do
            fit_pkg=$(cat $fl | jq -r '.packages."node_modules/${{ matrix.entries.pkgnm }}".version')
            fit_dep=$(cat $fl | jq -r '.dependencies."${{ matrix.entries.pkgnm }}".version')
            rtn=`chkver ${fit_pkg} ${{ matrix.entries.pkgvermin }} ${{ matrix.entries.pkgvermax }}` # when you call shell function which has many argument, you should enclose with [`] not ['].
            if (( $rtn )); then # numeric value comparison.
              errmsg=${errmsg}"-[${{ matrix.entries.pkgnm }} $fit_pkg] was found in '$fl'.%0A"
            fi
          done
          if [ "$errmsg" ]; then # string comparison via "".
            errmsg="Vulnerability package has included in your repository.%0A"$errmsg
            echo $errmsg
            echo "::set-output name=err_msg::$( echo $errmsg )"
            exit 1
          fi  

      - name: Write fail comment to pull request
        id: write-fail-comment
        # write comment to pull request if previous step failed.
        if: failure()
        uses: thollander/actions-comment-pull-request@v1
        with:
          message: ":x: ${{ steps.search-judge.outputs.err_msg }}"
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}




