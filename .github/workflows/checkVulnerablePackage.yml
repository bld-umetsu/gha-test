name: checkVulnerablePackage

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths: ['**/package-lock.json', '.github/workflows/vulnerablePackage.json']
  workflow_dispatch:

jobs:
  prepare-checking:
    runs-on: ubuntu-latest
    timeout-minutes: 1
    outputs:
      package_matrix: ${{ steps.read-json.outputs.value }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Read vulnerability list from JSON
        id: read-json
        # read Json as package checking list which includes package name and version.
        run:  |
          package_list=$(cat "./.github/workflows/vulnerablePackage.json" | jq -c)
          echo $package_list
          echo "::set-output name=value::$( echo $package_list )"

  execute:
    needs: prepare-checking
    runs-on: ubuntu-latest
    timeout-minutes: 5
    # the Json read by previous job is changed to checking jobs. each job has same steps.
    strategy:
      fail-fast: false
      matrix:
        entries: ${{fromJson(needs.prepare-checking.outputs.package_matrix)}}

    name: Checking ${{ matrix.entries.pkgnm }} ${{ matrix.entries.pkgvermin }}~${{ matrix.entries.pkgvermax }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Search and judge version of the package
        id: search-judge
        # search 'packages' and `dependencies` section for a version of vulnerable package.
        run:  |
          source ./.github/workflows/scripts/compareVersion.sh
          filelist=$(find ./ -mindepth 1 -name "package-lock.json" | jq -R -s -c 'split("\n")[:-1]')
          error_message=""
          for filepath in $(echo $filelist | jq -r '.[]'); do
            fit_packages_section=$(cat $filepath | jq -r '.packages."node_modules/${{ matrix.entries.pkgnm }}".version')
            return_judge=`checkversion ${fit_packages_section} ${{ matrix.entries.pkgvermin }} ${{ matrix.entries.pkgvermax }}` # when you call shell function which has many argument, you should enclose with [`] not ['].
            if (( $return_judge )); then # numeric value comparison.
              error_message=${error_message}"-[${{ matrix.entries.pkgnm }} $fit_packages_section] was found in '$filepath'.%0A"
            else
              fit_dependencies_section=$(cat $filepath | jq -r '.dependencies."${{ matrix.entries.pkgnm }}".version')
              return_judge2=`checkversion ${fit_dependencies_section} ${{ matrix.entries.pkgvermin }} ${{ matrix.entries.pkgvermax }}` # when you call shell function which has many argument, you should enclose with [`] not ['].
              if (( $return_judge2 )); then # numeric value comparison.
                error_message=${error_message}"-[${{ matrix.entries.pkgnm }} $fit_dependencies_section] was found in '$filepath'.%0A"
              fi
            fi
          done
          if [ "$error_message" ]; then # string comparison via "".
            error_message="vulnerable package has included in your repository.%0A"$error_message
            echo $error_message
            echo "::set-output name=judge_message::$( echo $error_message )"
            exit 1
          fi

      - name: Write fail comment to pull request
        id: write-fail-comment
        # write comment to pull request if previous step failed.
        if: failure()
        uses: thollander/actions-comment-pull-request@v1
        with:
          message: ":x: ${{ steps.search-judge.outputs.judge_message }}"
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}




